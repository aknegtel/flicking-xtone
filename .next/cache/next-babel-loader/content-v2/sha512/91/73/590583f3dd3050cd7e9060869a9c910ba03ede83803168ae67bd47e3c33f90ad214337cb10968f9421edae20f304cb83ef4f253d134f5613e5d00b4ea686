{"ast":null,"code":"var imagesLoaded = require(\"imagesloaded\"); // Map number x from range [a, b] to [c, d]\n\n\nvar map = function map(x, a, b, c, d) {\n  return (x - a) * (d - c) / (b - a) + c;\n}; // Linear interpolation\n\n\nvar lerp = function lerp(a, b, n) {\n  return (1 - n) * a + n * b;\n};\n\nvar clamp = function clamp(num, min, max) {\n  return num <= min ? min : num >= max ? max : num;\n};\n\nvar randomNumber = function randomNumber(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}; // Gets the mouse position\n\n\nvar getMousePos = function getMousePos(e) {\n  return {\n    x: e.clientX,\n    y: e.clientY\n  };\n}; // Preload images\n\n\nvar preloadImages = function preloadImages() {\n  var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"img\";\n  return new Promise(function (resolve) {\n    imagesLoaded(document.querySelectorAll(selector), {\n      background: true\n    }, resolve);\n  });\n}; // Preload images\n\n\nvar preloadFonts = function preloadFonts(id) {\n  return new Promise(function (resolve) {\n    WebFont.load({\n      typekit: {\n        id: id\n      },\n      active: resolve\n    });\n  });\n};\n\nexport { map, lerp, clamp, randomNumber, getMousePos, preloadImages, preloadFonts };","map":{"version":3,"sources":["/Users/es00400142/test-projects/flicking-reproducible-pagination/lib/utils.js"],"names":["imagesLoaded","require","map","x","a","b","c","d","lerp","n","clamp","num","min","max","randomNumber","Math","floor","random","getMousePos","e","clientX","y","clientY","preloadImages","selector","Promise","resolve","document","querySelectorAll","background","preloadFonts","id","WebFont","load","typekit","active"],"mappings":"AAAA,IAAMA,YAAY,GAAGC,OAAO,CAAC,cAAD,CAA5B,C,CAEA;;;AACA,IAAMC,GAAG,GAAG,SAANA,GAAM,CAACC,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EAAUC,CAAV,EAAaC,CAAb;AAAA,SAAoB,CAACJ,CAAC,GAAGC,CAAL,KAAWG,CAAC,GAAGD,CAAf,CAAD,IAAuBD,CAAC,GAAGD,CAA3B,IAAgCE,CAAnD;AAAA,CAAZ,C,CAEA;;;AACA,IAAME,IAAI,GAAG,SAAPA,IAAO,CAACJ,CAAD,EAAIC,CAAJ,EAAOI,CAAP;AAAA,SAAa,CAAC,IAAIA,CAAL,IAAUL,CAAV,GAAcK,CAAC,GAAGJ,CAA/B;AAAA,CAAb;;AAEA,IAAMK,KAAK,GAAG,SAARA,KAAQ,CAACC,GAAD,EAAMC,GAAN,EAAWC,GAAX;AAAA,SAAoBF,GAAG,IAAIC,GAAP,GAAaA,GAAb,GAAmBD,GAAG,IAAIE,GAAP,GAAaA,GAAb,GAAmBF,GAA1D;AAAA,CAAd;;AAEA,IAAMG,YAAY,GAAG,SAAfA,YAAe,CAACF,GAAD,EAAMC,GAAN;AAAA,SACnBE,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBJ,GAAG,GAAGD,GAAN,GAAY,CAA7B,IAAkCA,GAA7C,CADmB;AAAA,CAArB,C,CAGA;;;AACA,IAAMM,WAAW,GAAG,SAAdA,WAAc,CAACC,CAAD,EAAO;AACzB,SAAO;AACLhB,IAAAA,CAAC,EAAEgB,CAAC,CAACC,OADA;AAELC,IAAAA,CAAC,EAAEF,CAAC,CAACG;AAFA,GAAP;AAID,CALD,C,CAOA;;;AACA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAsB;AAAA,MAArBC,QAAqB,uEAAV,KAAU;AAC1C,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9B1B,IAAAA,YAAY,CACV2B,QAAQ,CAACC,gBAAT,CAA0BJ,QAA1B,CADU,EAEV;AAAEK,MAAAA,UAAU,EAAE;AAAd,KAFU,EAGVH,OAHU,CAAZ;AAKD,GANM,CAAP;AAOD,CARD,C,CAUA;;;AACA,IAAMI,YAAY,GAAG,SAAfA,YAAe,CAACC,EAAD,EAAQ;AAC3B,SAAO,IAAIN,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9BM,IAAAA,OAAO,CAACC,IAAR,CAAa;AACXC,MAAAA,OAAO,EAAE;AACPH,QAAAA,EAAE,EAAEA;AADG,OADE;AAIXI,MAAAA,MAAM,EAAET;AAJG,KAAb;AAMD,GAPM,CAAP;AAQD,CATD;;AAWA,SACExB,GADF,EAEEM,IAFF,EAGEE,KAHF,EAIEI,YAJF,EAKEI,WALF,EAMEK,aANF,EAOEO,YAPF","sourcesContent":["const imagesLoaded = require(\"imagesloaded\");\n\n// Map number x from range [a, b] to [c, d]\nconst map = (x, a, b, c, d) => ((x - a) * (d - c)) / (b - a) + c;\n\n// Linear interpolation\nconst lerp = (a, b, n) => (1 - n) * a + n * b;\n\nconst clamp = (num, min, max) => (num <= min ? min : num >= max ? max : num);\n\nconst randomNumber = (min, max) =>\n  Math.floor(Math.random() * (max - min + 1) + min);\n\n// Gets the mouse position\nconst getMousePos = (e) => {\n  return {\n    x: e.clientX,\n    y: e.clientY,\n  };\n};\n\n// Preload images\nconst preloadImages = (selector = \"img\") => {\n  return new Promise((resolve) => {\n    imagesLoaded(\n      document.querySelectorAll(selector),\n      { background: true },\n      resolve\n    );\n  });\n};\n\n// Preload images\nconst preloadFonts = (id) => {\n  return new Promise((resolve) => {\n    WebFont.load({\n      typekit: {\n        id: id,\n      },\n      active: resolve,\n    });\n  });\n};\n\nexport {\n  map,\n  lerp,\n  clamp,\n  randomNumber,\n  getMousePos,\n  preloadImages,\n  preloadFonts,\n};\n"]},"metadata":{},"sourceType":"module"}